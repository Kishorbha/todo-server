openapi: 3.0.3
info:
  title: TodoAPI
  description: >-
    # Todo.app

    The **TodoAPI** project is 🚀 private property, which belongs to Kishor Bhandari .

  version: 1.0.0
  contact: {}
servers:
  - url: 'http://localhost:9000/api/v1'
paths:
  /users/google:
    get:
      tags:
        - 🔐 Authentication

      summary: Redirect to google login
      description: >-
        Redirect user to this url when user clicks on the **`Login with
        Google`** button.


        This url will render the google concent screen where user can select the
        google account with which he/she wants to login with.
      operationId: redirectToGoogleLogin
      responses:
        '200':
          description: ''
  /users/google/callback:
    get:
      tags:
        - 🔐 Authentication

      summary: Google login callback url
      description: >-
        Google will send user details in JSON format once user successfully logs
        in.


        Backend will create an access and refresh token and will redirect user
        to the appropreate frontend url with access token and refresh token in
        the query parameter.
      operationId: googleLoginCallbackUrl
      responses:
        '200':
          description: ''
  /users/auth0:
    get:
      tags:
        - 🔐 Authentication

      summary: Redirect to auth0 login
      description: >-
        Redirect user to this url when user clicks on the **`Login with
        auth0`** button.


        This url will render the github concent screen where user can select the
        github account with which he/she wants to login with.
      operationId: redirectToAuth0Login
      responses:
        '200':
          description: ''
  /users/auth0/callback:
    get:
      tags:
        - 🔐 Authentication

      summary: Auth0 login callback url
      description: >-
        Auth0 will send user details in JSON format once user successfully logs
        in.


        Backend will create an access and refresh token and will redirect user
        to the appropreate frontend url with access token and refresh token in
        the query parameter.
      operationId: githubLoginCallbackUrl
      responses:
        '200':
          description: ''
  /users/current-user:
    get:
      tags:
        - 🔐 Authentication
      summary: Get logged in user
      description: >-
        The API endpoint allows you to retrieve the details of the currently
        logged-in user based on their authentication token.


        When accessing this endpoint with a valid authentication token, you will
        receive a response containing the information of the user who is
        currently authenticated and logged in.
      operationId: getLoggedInUser
      responses:
        '200':
          description: Get logged in user
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '443'
            Date:
              schema:
                type: string
                example: Fri, 30 Jun 2023 06:44:47 GMT
            ETag:
              schema:
                type: string
                example: W/"1bb-YVaffq7t8o3of0yDl9g26tprr/8"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            RateLimit-Limit:
              schema:
                type: string
                example: '500'
            RateLimit-Remaining:
              schema:
                type: string
                example: '493'
            RateLimit-Reset:
              schema:
                type: string
                example: '631'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      __v:
                        type: number
                        example: 0
                      _id:
                        type: string
                        example: 649e795264e7dba29b726936
                      avatar:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 649e795264e7dba29b726935
                          localPath:
                            type: string
                            example: ''
                          url:
                            type: string
                            example: https://via.placeholder.com/200x200.png
                      createdAt:
                        type: string
                        example: '2023-06-30T06:42:26.163Z'
                      email:
                        type: string
                        example: user.email@domain.com
                      isEmailVerified:
                        type: boolean
                        example: false
                      loginType:
                        type: string
                        example: EMAIL_PASSWORD
                      role:
                        type: string
                        example: ADMIN
                      updatedAt:
                        type: string
                        example: '2023-06-30T06:44:29.831Z'
                      username:
                        type: string
                        example: doejohn
                  message:
                    type: string
                    example: Current user fetched successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Get logged in user:
                  value:
                    data:
                      __v: 0
                      _id: 649e795264e7dba29b726936
                      avatar:
                        _id: 649e795264e7dba29b726935
                        localPath: ''
                        url: https://via.placeholder.com/200x200.png
                      createdAt: '2023-06-30T06:42:26.163Z'
                      email: user.email@domain.com
                      isEmailVerified: false
                      loginType: EMAIL_PASSWORD
                      role: ADMIN
                      updatedAt: '2023-06-30T06:44:29.831Z'
                      username: doejohn
                    message: Current user fetched successfully
                    statusCode: 200
                    success: true
  /users/verify-email/{verificationToken}:
    get:
      tags:
        - 🔐 Authentication
      summary: Verify user email
      description: >-
        The API endpoint is used to verify a user's email by accessing the
        verification token (**verificationToken**) included in the path
        variable.


        When the user clicks on the email verification link provided to them,
        this API is invoked to validate their email address.


        By including the verification token in the URL path, the endpoint
        confirms the authenticity of the token and marks the user's email as
        verified.
      operationId: verifyUserEmail
      responses:
        '200':
          description: Verify user email
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '95'
            Date:
              schema:
                type: string
                example: Fri, 02 Jun 2023 06:06:05 GMT
            ETag:
              schema:
                type: string
                example: W/"5f-LuP/p60fMKWCCasH+xNnLel8HrI"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      isEmailVerified:
                        type: boolean
                        example: true
                  message:
                    type: string
                    example: Email is verified
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Verify user email:
                  value:
                    data:
                      isEmailVerified: true
                    message: Email is verified
                    statusCode: 200
                    success: true
    parameters:
      - name: verificationToken
        in: path
        required: true
        schema:
          type: string
          example: ffff8c2d25725516cf34c8cfa9c5f4d8f1f1f407
  /users/register:
    post:
      tags:
        - 🔐 Authentication
      summary: Register user
      description: >-
        The API endpoint allows users to register or signup to create their
        accounts.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user.email@domain.com
                password:
                  type: string
                  example: test@123
                role:
                  type: string
                  example: ADMIN
                fullname:
                  type: string
                  example: doe john
            example:
              email: user.email@domain.com
              password: test@123
              role: ADMIN
              fullname: doe john
      responses:
        '201':
          description: Register user
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '500'
            Date:
              schema:
                type: string
                example: Fri, 30 Jun 2023 06:44:09 GMT
            ETag:
              schema:
                type: string
                example: W/"1f4-1q38Sbu25p0UVmeYQmrEv2VrgPg"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            RateLimit-Limit:
              schema:
                type: string
                example: '500'
            RateLimit-Remaining:
              schema:
                type: string
                example: '495'
            RateLimit-Reset:
              schema:
                type: string
                example: '772'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          __v:
                            type: number
                            example: 0
                          _id:
                            type: string
                            example: 649e795264e7dba29b726936
                          avatar:
                            type: object
                            properties:
                              _id:
                                type: string
                                example: 649e795264e7dba29b726935
                              localPath:
                                type: string
                                example: ''
                              url:
                                type: string
                                example: https://via.placeholder.com/200x200.png
                          createdAt:
                            type: string
                            example: '2023-06-30T06:42:26.163Z'
                          email:
                            type: string
                            example: user.email@domain.com
                          isEmailVerified:
                            type: boolean
                            example: false
                          loginType:
                            type: string
                            example: EMAIL_PASSWORD
                          role:
                            type: string
                            example: ADMIN
                          updatedAt:
                            type: string
                            example: '2023-06-30T06:42:26.247Z'
                          fullname:
                            type: string
                            example: doe john
                  message:
                    type: string
                    example: >-
                      Users registered successfully and verification email has
                      been sent on your email.
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Register user:
                  value:
                    data:
                      user:
                        __v: 0
                        _id: 649e795264e7dba29b726936
                        avatar:
                          _id: 649e795264e7dba29b726935
                          localPath: ''
                          url: https://via.placeholder.com/200x200.png
                        createdAt: '2023-06-30T06:42:26.163Z'
                        email: user.email@domain.com
                        isEmailVerified: false
                        loginType: EMAIL_PASSWORD
                        role: ADMIN
                        updatedAt: '2023-06-30T06:42:26.247Z'
                        fullname: doe john
                    message: >-
                      Users registered successfully and verification email has
                      been sent on your email.
                    statusCode: 200
                    success: true
  /users/login:
    post:
      tags:
        - 🔐 Authentication
      summary: Login user
      description: >-
        The API endpoint allows users to log into the application securely and
        also returns an access token.


        When accessing this endpoint with valid login credentials, users will
        receive an access token in the response.


        Additionally, the API endpoint securely sets the access token within the
        browser/client httpOnly cookies for future authentication and
        authorization purposes.


        This functionality ensures a secure and efficient login process for
        users, providing them with an access token that can be used to
        authenticate subsequent API requests.


        By securely storing the access token in browser cookies, the endpoint
        enables automatic inclusion of the access token in future API requests,
        eliminating the need for users to manually manage and provide the token
        with each request.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user.email@domain.com
                password:
                  type: string
                  example: test@123
            example:
              email: user.email@domain.com
              password: test@123
      responses:
        '200':
          description: Login user
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '926'
            Date:
              schema:
                type: string
                example: Fri, 30 Jun 2023 06:44:29 GMT
            ETag:
              schema:
                type: string
                example: W/"39e-a7Fdn0Th2/i/29/rw1he3r/pebo"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            RateLimit-Limit:
              schema:
                type: string
                example: '500'
            RateLimit-Remaining:
              schema:
                type: string
                example: '494'
            RateLimit-Reset:
              schema:
                type: string
                example: '648'
            Set-Cookie:
              schema:
                type: string
                example: >-
                  refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDllNzk1MjY0ZTdkYmEyOWI3MjY5MzYiLCJpYXQiOjE2ODgxMDc0NjksImV4cCI6MTY4ODk3MTQ2OX0.7or55Coj0K_UY4YpzYzkNR9hcOIhusxk9FRz7eMV8Ho;
                  Path=/; HttpOnly
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDllNzk1MjY0ZTdkYmEyOWI3MjY5MzYiLCJlbWFpbCI6IndhamUuc2h1YmhhbTExMUBnbWFpbC5jb20iLCJ1c2VybmFtZSI6IndhamVzaHViaGFtIiwicm9sZSI6IkFETUlOIiwiaWF0IjoxNjg4MTA3NDY5LCJleHAiOjE2ODgxOTM4Njl9.40qfVrWi8x8fGBRB9JBVCVsdMYvlwzjIRpffz5z7DK4
                      refreshToken:
                        type: string
                        example: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDllNzk1MjY0ZTdkYmEyOWI3MjY5MzYiLCJpYXQiOjE2ODgxMDc0NjksImV4cCI6MTY4ODk3MTQ2OX0.7or55Coj0K_UY4YpzYzkNR9hcOIhusxk9FRz7eMV8Ho
                      user:
                        type: object
                        properties:
                          __v:
                            type: number
                            example: 0
                          _id:
                            type: string
                            example: 649e795264e7dba29b726936
                          avatar:
                            type: object
                            properties:
                              _id:
                                type: string
                                example: 649e795264e7dba29b726935
                              localPath:
                                type: string
                                example: ''
                              url:
                                type: string
                                example: https://via.placeholder.com/200x200.png
                          createdAt:
                            type: string
                            example: '2023-06-30T06:42:26.163Z'
                          email:
                            type: string
                            example: user.email@domain.com
                          isEmailVerified:
                            type: boolean
                            example: false
                          loginType:
                            type: string
                            example: EMAIL_PASSWORD
                          role:
                            type: string
                            example: ADMIN
                          updatedAt:
                            type: string
                            example: '2023-06-30T06:44:29.831Z'
                          fullname:
                            type: string
                            example: doe john
                  message:
                    type: string
                    example: User logged in successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Login user:
                  value:
                    data:
                      accessToken: >-
                        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDllNzk1MjY0ZTdkYmEyOWI3MjY5MzYiLCJlbWFpbCI6IndhamUuc2h1YmhhbTExMUBnbWFpbC5jb20iLCJ1c2VybmFtZSI6IndhamVzaHViaGFtIiwicm9sZSI6IkFETUlOIiwiaWF0IjoxNjg4MTA3NDY5LCJleHAiOjE2ODgxOTM4Njl9.40qfVrWi8x8fGBRB9JBVCVsdMYvlwzjIRpffz5z7DK4
                      refreshToken: >-
                        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDllNzk1MjY0ZTdkYmEyOWI3MjY5MzYiLCJpYXQiOjE2ODgxMDc0NjksImV4cCI6MTY4ODk3MTQ2OX0.7or55Coj0K_UY4YpzYzkNR9hcOIhusxk9FRz7eMV8Ho
                      user:
                        __v: 0
                        _id: 649e795264e7dba29b726936
                        avatar:
                          _id: 649e795264e7dba29b726935
                          localPath: ''
                          url: https://via.placeholder.com/200x200.png
                        createdAt: '2023-06-30T06:42:26.163Z'
                        email: user.email@domain.com
                        isEmailVerified: false
                        loginType: EMAIL_PASSWORD
                        role: ADMIN
                        updatedAt: '2023-06-30T06:44:29.831Z'
                        fullname: doe john
                    message: User logged in successfully
                    statusCode: 200
                    success: true
  /users/logout:
    post:
      tags:
        - 🔐 Authentication
      summary: Logout user
      description: >-
        The API endpoint is responsible for logging out users from the
        application and destroying the access token cookies stored on the
        client-side.


        When accessing this endpoint, it triggers the logout process, revoking
        the user's authentication and terminating their active session.


        Additionally, it ensures that any access token cookies associated with
        the user's session are removed from the client's browser, effectively
        logging them out from the application.
      operationId: logoutUser
      responses:
        '200':
          description: Logout user
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '71'
            Date:
              schema:
                type: string
                example: Sun, 04 Jun 2023 14:53:17 GMT
            ETag:
              schema:
                type: string
                example: W/"47-As20QlSbGGTq515zdhzWHPjwWhg"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Set-Cookie:
              schema:
                type: string
                example: >-
                  refreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT;
                  HttpOnly
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: User logged out
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Logout user:
                  value:
                    data: {}
                    message: User logged out
                    statusCode: 200
                    success: true
  /users/refresh-token:
    get:
      tags:
        - 🔐 Authentication
      summary: Refresh token
      description: >-
        The Refresh Access Token API is responsible for refreshing the access
        token when it expires.


        It allows you to make a request to this endpoint with the refresh token,
        which has a lengthy expiry time, to obtain a new access token.


        Simultaneously, the API sets the new access token in a cookie for future
        authentication purposes while replacing the expired one.


        This functionality ensures continuous access to protected resources by
        automatically renewing the access token **without requiring the user to
        reauthenticate manually**.


        By utilizing the refresh token, the API securely refreshes the access
        token and updates it in the cookie, ensuring seamless and uninterrupted
        access to authorized endpoints.
      operationId: refreshToken
      responses:
        '200':
          description: Refresh token
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '556'
            Date:
              schema:
                type: string
                example: Wed, 31 May 2023 20:00:21 GMT
            ETag:
              schema:
                type: string
                example: W/"22c-gnaKNqPZuv/nGCkHvGfPrASxDPw"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Set-Cookie:
              schema:
                type: string
                example: >-
                  refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDc2ZTM0ZWJlMWNmYjljYzA4YmQ0NDYiLCJpYXQiOjE2ODU1NjMyMjEsImV4cCI6MTY4NjQyNzIyMX0.TJpj8-2qU__GI_dKDdrHwQvUWCFSFXCfgOuV6MV05UI;
                  Path=/; HttpOnly
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDc2ZTM0ZWJlMWNmYjljYzA4YmQ0NDYiLCJlbWFpbCI6IndhamUuc2h1YmhhbTExMUBnbWFpbC5jb20iLCJ1c2VybmFtZSI6IndhamVzaHViaGFtIiwicm9sZSI6IlVTRVIiLCJpYXQiOjE2ODU1NjMyMjEsImV4cCI6MTY4NTY0OTYyMX0.o6vbC9qrMHV_FfQNFZX3h053eOHvBgbl0iQJSB5NeNc
                      refreshToken:
                        type: string
                        example: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDc2ZTM0ZWJlMWNmYjljYzA4YmQ0NDYiLCJpYXQiOjE2ODU1NjMyMjEsImV4cCI6MTY4NjQyNzIyMX0.TJpj8-2qU__GI_dKDdrHwQvUWCFSFXCfgOuV6MV05UI
                  message:
                    type: string
                    example: Access token refreshed
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Refresh token:
                  value:
                    data:
                      accessToken: >-
                        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDc2ZTM0ZWJlMWNmYjljYzA4YmQ0NDYiLCJlbWFpbCI6IndhamUuc2h1YmhhbTExMUBnbWFpbC5jb20iLCJ1c2VybmFtZSI6IndhamVzaHViaGFtIiwicm9sZSI6IlVTRVIiLCJpYXQiOjE2ODU1NjMyMjEsImV4cCI6MTY4NTY0OTYyMX0.o6vbC9qrMHV_FfQNFZX3h053eOHvBgbl0iQJSB5NeNc
                      refreshToken: >-
                        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDc2ZTM0ZWJlMWNmYjljYzA4YmQ0NDYiLCJpYXQiOjE2ODU1NjMyMjEsImV4cCI6MTY4NjQyNzIyMX0.TJpj8-2qU__GI_dKDdrHwQvUWCFSFXCfgOuV6MV05UI
                    message: Access token refreshed
                    statusCode: 200
                    success: true
  /users/resend-email-verification:
    post:
      tags:
        - 🔐 Authentication
      summary: Resend email verification
      description: >-
        The API endpoint allows the logged-in user to request a resend of the
        email verification mail.


        By accessing this endpoint, the user can trigger the system to send
        another email verification link to their registered email address.


        This functionality is useful in cases where the initial verification
        email may have been missed, expired, or encountered delivery issues.
      operationId: resendEmailVerification
      responses:
        '200':
          description: Resend email verification
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '90'
            Date:
              schema:
                type: string
                example: Tue, 11 Jul 2023 11:21:09 GMT
            ETag:
              schema:
                type: string
                example: W/"5a-X7vQiakRpbaQ9FVZl382RqNiEXM"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            RateLimit-Limit:
              schema:
                type: string
                example: '500'
            RateLimit-Remaining:
              schema:
                type: string
                example: '496'
            RateLimit-Reset:
              schema:
                type: string
                example: '256'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Mail has been sent to your mail ID
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Resend email verification:
                  value:
                    data: {}
                    message: Mail has been sent to your mail ID
                    statusCode: 200
                    success: true
        '409':
          description: Email already verified
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '308'
            Date:
              schema:
                type: string
                example: Tue, 11 Jul 2023 11:20:26 GMT
            ETag:
              schema:
                type: string
                example: W/"134-2nk8UuSQMCvNMSSCvXDmtH9sxC0"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            RateLimit-Limit:
              schema:
                type: string
                example: '500'
            RateLimit-Remaining:
              schema:
                type: string
                example: '499'
            RateLimit-Reset:
              schema:
                type: string
                example: '295'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    nullable: true
                    example: null
                  errors:
                    type: array
                    items: {}
                    example: []
                  message:
                    type: string
                    example: Email is already verified!
                  stack:
                    type: string
                    example: |-
                      Error: Email is already verified!
                          at file:///usr/src/freeapi/src/controllers/apps/auth/user.controllers.js:240:11
                          at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
                  statusCode:
                    type: number
                    example: 409
                  success:
                    type: boolean
                    example: false
              examples:
                Email already verified:
                  value:
                    data: null
                    errors: []
                    message: Email is already verified!
                    stack: |-
                      Error: Email is already verified!
                          at file:///usr/src/freeapi/src/controllers/apps/auth/user.controllers.js:240:11
                          at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
                    statusCode: 409
                    success: false
  /users/change-password:
    post:
      tags:
        - 🔐 Authentication
      summary: Change current password
      description: >-
        The Change Password API allows logged-in users to update their current
        password by providing the old password as a verification step.


        This API provides a secure mechanism for users to change their passwords
        within the application.


        By accessing this endpoint and providing the old password, users can
        initiate the password change process and set a new password of their
        choice.
      operationId: changeCurrentPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: test@123
                oldPassword:
                  type: string
                  example: new@123
            example:
              newPassword: test@123
              oldPassword: new@123
      responses:
        '200':
          description: Change current password
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '85'
            Date:
              schema:
                type: string
                example: Wed, 31 May 2023 19:59:47 GMT
            ETag:
              schema:
                type: string
                example: W/"55-CyGJCaxqcCXrzMloar9z7m95mvk"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Password changed successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Change current password:
                  value:
                    data: {}
                    message: Password changed successfully
                    statusCode: 200
                    success: true
  /users/forgot-password:
    post:
      tags:
        - 🔐 Authentication
      summary: Forgot password request
      description: >-
        The API endpoint allows you to send a forgot password email by providing
        the user's email ID.


        When accessing this endpoint and providing the email ID as a parameter,
        the API initiates the process of sending a password reset email to the
        specified email address.


        This functionality is useful for implementing password recovery
        mechanisms within your application, allowing users to reset their
        passwords securely.
      operationId: forgotPasswordRequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user.email@domain.com
            example:
              email: user.email@domain.com
      responses:
        '200':
          description: Forgot password request
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '105'
            Date:
              schema:
                type: string
                example: Wed, 31 May 2023 19:56:15 GMT
            ETag:
              schema:
                type: string
                example: W/"69-7OD21C6OqsuAipwphfFVCzbFDQc"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Password reset mail has been sent on your mail id
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Forgot password request:
                  value:
                    data: {}
                    message: Password reset mail has been sent on your mail id
                    statusCode: 200
                    success: true
  /users/reset-password/{resetToken}:
    post:
      tags:
        - 🔐 Authentication
      summary: Reset forgotten password
      description: >-
        The API endpoint enables users to reset their password through the
        password reset email.


        By providing the new password and the password reset token obtained from
        the URL, users can securely reset their password and regain access to
        their account.


        This functionality ensures a secure and streamlined password reset
        process, allowing users to update their password conveniently and
        protect their account from unauthorized access.
      operationId: resetForgottenPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  example: test@123
            example:
              newPassword: test@123
      responses:
        '200':
          description: Reset forgotten password
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '83'
            Date:
              schema:
                type: string
                example: Wed, 31 May 2023 19:56:40 GMT
            ETag:
              schema:
                type: string
                example: W/"53-RWrdVFUHS8Zx4JB6qmRarYVrwKw"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Password reset successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Reset forgotten password:
                  value:
                    data: {}
                    message: Password reset successfully
                    statusCode: 200
                    success: true
    parameters:
      - name: resetToken
        in: path
        required: true
        schema:
          type: string
          example: ''
  /users/avatar:
    patch:
      tags:
        - 🔐 Authentication
      summary: Update avatar
      description: >-
        The API endpoint enables users to update their avatar or profile
        picture.


        By accessing this endpoint and providing the necessary parameters, users
        can upload a new image file for their desired avatar.
      operationId: updateAvatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  description: File
                  type: string
                  format: binary
      responses:
        '200':
          description: Update avatar
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '910'
            Date:
              schema:
                type: string
                example: Fri, 30 Jun 2023 06:45:46 GMT
            ETag:
              schema:
                type: string
                example: W/"38e-+vTTKQiTCppZaCs9tEWJWWsmzZI"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            RateLimit-Limit:
              schema:
                type: string
                example: '500'
            RateLimit-Remaining:
              schema:
                type: string
                example: '490'
            RateLimit-Reset:
              schema:
                type: string
                example: '572'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      __v:
                        type: number
                        example: 0
                      _id:
                        type: string
                        example: 649e795264e7dba29b726936
                      avatar:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 649e7a1a64e7dba29b726965
                          localPath:
                            type: string
                            example: public/images/plastic168810754602425641.jpeg
                          url:
                            type: string
                            example: >-
                              http://localhost:8080/images/plastic168810754602425641.jpeg
                      createdAt:
                        type: string
                        example: '2023-06-30T06:42:26.163Z'
                      email:
                        type: string
                        example: user.email@domain.com
                      emailVerificationExpiry:
                        type: string
                        example: '2023-06-30T07:02:26.246Z'
                      emailVerificationToken:
                        type: string
                        example: >-
                          d2749e5298e1acf73cf09d06477669415503bb81e3c6505eff4560c6522ad263
                      isEmailVerified:
                        type: boolean
                        example: false
                      loginType:
                        type: string
                        example: EMAIL_PASSWORD
                      password:
                        type: string
                        example: >-
                          $2b$10$hyujCc82BcVxlKL42YH2N.bES5gr3SbSt1njbzYh1Deim/KI2sx0i
                      refreshToken:
                        type: string
                        example: >-
                          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDllNzk1MjY0ZTdkYmEyOWI3MjY5MzYiLCJpYXQiOjE2ODgxMDc1MjAsImV4cCI6MTY4ODk3MTUyMH0.Y9w5ZbXs8S8n2kuTLBHA5co8ez4KvebyJS2_o-9mxKU
                      role:
                        type: string
                        example: ADMIN
                      updatedAt:
                        type: string
                        example: '2023-06-30T06:45:46.055Z'
                      username:
                        type: string
                        example: doejohn
                  message:
                    type: string
                    example: Avatar updated successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Update avatar:
                  value:
                    data:
                      __v: 0
                      _id: 649e795264e7dba29b726936
                      avatar:
                        _id: 649e7a1a64e7dba29b726965
                        localPath: public/images/plastic168810754602425641.jpeg
                        url: >-
                          http://localhost:8080/images/plastic168810754602425641.jpeg
                      createdAt: '2023-06-30T06:42:26.163Z'
                      email: user.email@domain.com
                      emailVerificationExpiry: '2023-06-30T07:02:26.246Z'
                      emailVerificationToken: >-
                        d2749e5298e1acf73cf09d06477669415503bb81e3c6505eff4560c6522ad263
                      isEmailVerified: false
                      loginType: EMAIL_PASSWORD
                      password: >-
                        $2b$10$hyujCc82BcVxlKL42YH2N.bES5gr3SbSt1njbzYh1Deim/KI2sx0i
                      refreshToken: >-
                        eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDllNzk1MjY0ZTdkYmEyOWI3MjY5MzYiLCJpYXQiOjE2ODgxMDc1MjAsImV4cCI6MTY4ODk3MTUyMH0.Y9w5ZbXs8S8n2kuTLBHA5co8ez4KvebyJS2_o-9mxKU
                      role: ADMIN
                      updatedAt: '2023-06-30T06:45:46.055Z'
                      username: doejohn
                    message: Avatar updated successfully
                    statusCode: 200
                    success: true
  /todos:
    get:
      tags:
        - 📝 Todo list
      summary: Get all todos
      description: >-
        The API endpoint allows you to retrieve all the added todos.


        When accessing this endpoint, you will receive a response containing a
        list of all the todos that have been added.
      operationId: getAllTodos
      parameters:
        - name: query
          in: query
          schema:
            type: string
            example: reactjs
        - name: complete
          in: query
          schema:
            type: string
            example: 'false'
      responses:
        '201':
          description: Get all todos
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '815'
            Date:
              schema:
                type: string
                example: Sat, 17 Jun 2023 19:19:40 GMT
            ETag:
              schema:
                type: string
                example: W/"32f-LlDKeMfFfXV5TgAkP4oFcqRrOrI"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        __v:
                          type: number
                          example: 0
                        _id:
                          type: string
                          example: 648e070a36b0cc220c8a7883
                        createdAt:
                          type: string
                          example: '2023-06-17T19:18:34.462Z'
                        description:
                          type: string
                          example: Some description about todo
                        isDone:
                          type: boolean
                          example: false
                        title:
                          type: string
                          example: Learn python
                        updatedAt:
                          type: string
                          example: '2023-06-17T19:18:34.462Z'
                    example:
                      - __v: 0
                        _id: 648e070a36b0cc220c8a7883
                        createdAt: '2023-06-17T19:18:34.462Z'
                        description: Some description about todo
                        isDone: false
                        title: Learn python
                        updatedAt: '2023-06-17T19:18:34.462Z'
                      - __v: 0
                        _id: 648e0741aeefd0cfa40adddd
                        createdAt: '2023-06-17T19:19:29.887Z'
                        description: ''
                        isDone: false
                        title: Learn Javascript
                        updatedAt: '2023-06-17T19:19:29.887Z'
                      - __v: 0
                        _id: 648e0746aeefd0cfa40adddf
                        createdAt: '2023-06-17T19:19:34.866Z'
                        description: ''
                        isDone: false
                        title: Learn ReactJs
                        updatedAt: '2023-06-17T19:19:34.866Z'
                      - __v: 0
                        _id: 648e0749aeefd0cfa40adde1
                        createdAt: '2023-06-17T19:19:37.856Z'
                        description: ''
                        isDone: false
                        title: Learn Ruby
                        updatedAt: '2023-06-17T19:19:37.856Z'
                  message:
                    type: string
                    example: Todos fetched successfully
                  statusCode:
                    type: number
                    example: 201
                  success:
                    type: boolean
                    example: true
              examples:
                Get all todos:
                  value:
                    data:
                      - __v: 0
                        _id: 648e070a36b0cc220c8a7883
                        createdAt: '2023-06-17T19:18:34.462Z'
                        description: Some description about todo
                        isDone: false
                        title: Learn python
                        updatedAt: '2023-06-17T19:18:34.462Z'
                      - __v: 0
                        _id: 648e0741aeefd0cfa40adddd
                        createdAt: '2023-06-17T19:19:29.887Z'
                        description: ''
                        isDone: false
                        title: Learn Javascript
                        updatedAt: '2023-06-17T19:19:29.887Z'
                      - __v: 0
                        _id: 648e0746aeefd0cfa40adddf
                        createdAt: '2023-06-17T19:19:34.866Z'
                        description: ''
                        isDone: false
                        title: Learn ReactJs
                        updatedAt: '2023-06-17T19:19:34.866Z'
                      - __v: 0
                        _id: 648e0749aeefd0cfa40adde1
                        createdAt: '2023-06-17T19:19:37.856Z'
                        description: ''
                        isDone: false
                        title: Learn Ruby
                        updatedAt: '2023-06-17T19:19:37.856Z'
                    message: Todos fetched successfully
                    statusCode: 201
                    success: true
  /todos/{todoId}:
    get:
      tags:
        - 📝 Todo list
      summary: Get todo by id
      description: >-
        The API endpoint retrieves a specific todo item based on the todo ID
        provided as a path variable in the URL.


        When accessing this endpoint and specifying a valid todo ID in the URL,
        you will receive a response containing the details of the corresponding
        todo item.
      operationId: getTodoById
      responses:
        '200':
          description: Get todo by id
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '252'
            Date:
              schema:
                type: string
                example: Sat, 17 Jun 2023 19:20:47 GMT
            ETag:
              schema:
                type: string
                example: W/"fc-fYDCM8s+LQiWUEHhEFxMk3KK9Qc"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      __v:
                        type: number
                        example: 0
                      _id:
                        type: string
                        example: 648e0749aeefd0cfa40adde1
                      createdAt:
                        type: string
                        example: '2023-06-17T19:19:37.856Z'
                      description:
                        type: string
                        example: ''
                      isDone:
                        type: boolean
                        example: false
                      title:
                        type: string
                        example: Learn Ruby
                      updatedAt:
                        type: string
                        example: '2023-06-17T19:19:37.856Z'
                  message:
                    type: string
                    example: Todo fetched successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Get todo by id:
                  value:
                    data:
                      __v: 0
                      _id: 648e0749aeefd0cfa40adde1
                      createdAt: '2023-06-17T19:19:37.856Z'
                      description: ''
                      isDone: false
                      title: Learn Ruby
                      updatedAt: '2023-06-17T19:19:37.856Z'
                    message: Todo fetched successfully
                    statusCode: 200
                    success: true
    delete:
      tags:
        - 📝 Todo list
      summary: Delete todo
      description: >-
        The API endpoint is responsible for deleting a todo item based on the
        provided todoID in the path variable.


        When accessing this endpoint and specifying the todoID in the URL, the
        corresponding todo item will be deleted from the system.
      operationId: deleteTodo
      responses:
        '200':
          description: Delete todo
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '271'
            Date:
              schema:
                type: string
                example: Sat, 17 Jun 2023 19:23:31 GMT
            ETag:
              schema:
                type: string
                example: W/"10f-7UDFur/RLHAlGchjG57msSX30bM"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      deletedTodo:
                        type: object
                        properties:
                          __v:
                            type: number
                            example: 0
                          _id:
                            type: string
                            example: 648e0746aeefd0cfa40adddf
                          createdAt:
                            type: string
                            example: '2023-06-17T19:19:34.866Z'
                          description:
                            type: string
                            example: ''
                          isDone:
                            type: boolean
                            example: false
                          title:
                            type: string
                            example: Learn ReactJs
                          updatedAt:
                            type: string
                            example: '2023-06-17T19:19:34.866Z'
                  message:
                    type: string
                    example: Todo deleted successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Delete todo:
                  value:
                    data:
                      deletedTodo:
                        __v: 0
                        _id: 648e0746aeefd0cfa40adddf
                        createdAt: '2023-06-17T19:19:34.866Z'
                        description: ''
                        isDone: false
                        title: Learn ReactJs
                        updatedAt: '2023-06-17T19:19:34.866Z'
                    message: Todo deleted successfully
                    statusCode: 200
                    success: true
    patch:
      tags:
        - 📝 Todo list
      summary: Update todo
      description: >-
        The API endpoint is responsible for updating a todo based on the
        provided todo ID in the URL path variable.


        When accessing this endpoint and providing the updated todo title and
        description in the request body, the corresponding todo with the
        specified ID will be modified accordingly.
      operationId: updateTodo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Updated description of the todo
                title:
                  type: string
                  example: Updated todo title
            example:
              description: A new description for the todo
              title: A new title for the todo
      responses:
        '200':
          description: Update todo
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '277'
            Date:
              schema:
                type: string
                example: Sat, 17 Jun 2023 19:21:54 GMT
            ETag:
              schema:
                type: string
                example: W/"115-+z/wpUMotHlJe0Ob6u5SG/RvKBs"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      __v:
                        type: number
                        example: 0
                      _id:
                        type: string
                        example: 648e0749aeefd0cfa40adde1
                      createdAt:
                        type: string
                        example: '2023-06-17T19:19:37.856Z'
                      description:
                        type: string
                        example: Updated descripton
                      isDone:
                        type: boolean
                        example: false
                      title:
                        type: string
                        example: Updated ruby name
                      updatedAt:
                        type: string
                        example: '2023-06-17T19:21:54.446Z'
                  message:
                    type: string
                    example: Todo updated successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Update todo:
                  value:
                    data:
                      __v: 0
                      _id: 648e0749aeefd0cfa40adde1
                      createdAt: '2023-06-17T19:19:37.856Z'
                      description: Updated descripton
                      isDone: false
                      title: Updated ruby name
                      updatedAt: '2023-06-17T19:21:54.446Z'
                    message: Todo updated successfully
                    statusCode: 200
                    success: true
    parameters:
      - name: todoId
        in: path
        required: true
        schema:
          type: string
          example: 648e0741aeefd0cfa40adddd
  /todos/:
    post:
      tags:
        - 📝 Todo list
      summary: Create todo
      description: >-
        The "Create Todo" API endpoint allows you to create a new todo item by
        providing the title and description as a request body.


        By accessing this endpoint and providing the necessary information, a
        new todo item will be created in the system.
      operationId: createTodo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: Some description about todo which is optional
                title:
                  type: string
                  example: Contibute ReactJs
            example:
              description: Some description about todo which is optional
              title: Contibute ReactJs
      responses:
        '200':
          description: Create todo
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '252'
            Date:
              schema:
                type: string
                example: Sat, 17 Jun 2023 19:19:37 GMT
            ETag:
              schema:
                type: string
                example: W/"fc-KokD5QGTQLUd8zQOFigtnFMkxLs"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      __v:
                        type: number
                        example: 0
                      _id:
                        type: string
                        example: 648e0749aeefd0cfa40adde1
                      createdAt:
                        type: string
                        example: '2023-06-17T19:19:37.856Z'
                      description:
                        type: string
                        example: ''
                      isDone:
                        type: boolean
                        example: false
                      title:
                        type: string
                        example: Learn Ruby
                      updatedAt:
                        type: string
                        example: '2023-06-17T19:19:37.856Z'
                  message:
                    type: string
                    example: Todo created successfully
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Create todo:
                  value:
                    data:
                      __v: 0
                      _id: 648e0749aeefd0cfa40adde1
                      createdAt: '2023-06-17T19:19:37.856Z'
                      description: ''
                      isDone: false
                      title: Learn Ruby
                      updatedAt: '2023-06-17T19:19:37.856Z'
                    message: Todo created successfully
                    statusCode: 200
                    success: true
  /todos/toggle/status/{todoId}:
    patch:
      tags:
        - 📝 Todo list
      summary: Toggle todo done status
      description: >-
        The API endpoint is responsible for toggling the done status of a todo
        item.


        When accessing this endpoint and providing the necessary data, you can
        update the completion status of a specific todo item, marking it as
        either done or undone based on its current status.
      operationId: toggleTodoDoneStatus
      responses:
        '200':
          description: Toggle todo done status
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: 'true'
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Length:
              schema:
                type: string
                example: '234'
            Date:
              schema:
                type: string
                example: Sat, 17 Jun 2023 19:40:04 GMT
            ETag:
              schema:
                type: string
                example: W/"ea-BaNPJdAcA+Hnzwf+MEqMnN4sFho"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      __v:
                        type: number
                        example: 0
                      _id:
                        type: string
                        example: 648e0c0722147847623e0a00
                      createdAt:
                        type: string
                        example: '2023-06-17T19:39:51.789Z'
                      description:
                        type: string
                        example: ''
                      isComplete:
                        type: boolean
                        example: true
                      title:
                        type: string
                        example: Learn Ruby
                      updatedAt:
                        type: string
                        example: '2023-06-17T19:40:04.266Z'
                  message:
                    type: string
                    example: done
                  statusCode:
                    type: number
                    example: 200
                  success:
                    type: boolean
                    example: true
              examples:
                Toggle todo done status:
                  value:
                    data:
                      __v: 0
                      _id: 648e0c0722147847623e0a00
                      createdAt: '2023-06-17T19:39:51.789Z'
                      description: ''
                      isComplete: true
                      title: Learn Ruby
                      updatedAt: '2023-06-17T19:40:04.266Z'
                    message: done
                    statusCode: 200
                    success: true
    parameters:
      - name: todoId
        in: path
        required: true
        schema:
          type: string
          example: 648e0c0722147847623e0a00
tags:
  - name: 🔐 Authentication
    description: >-
      This section encompasses all the APIs related to user authentication.
  - name: 📝 Todo list
    description: >-
      This section comprises all the APIs necessary for building a todo list
      application.
